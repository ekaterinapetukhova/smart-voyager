generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  female
  male
}

model User {
  id String @id @default(uuid())

  name         String
  email        String   @unique
  birthDate    DateTime
  passwordHash String
  createdAt    DateTime @default(now())
  gender       Gender
  avatar       String

  verified Boolean @default(false)

  shouldBeVisible Boolean?
  country         String?
  city            String?
  languages       String?
  description     String?

  Route Route[]

  chatMessageRecipient ChatMessage[] @relation(name: "chatMessageRecipient")
  chatMessageSender    ChatMessage[] @relation(name: "chatMessageSender")

  Chat Chat[] @relation(name: "chatMembers")
}

model RouteWaypoint {
  id String @id @default(uuid())

  index     Int
  latitude  Float
  longitude Float
  name      String?

  route   Route  @relation(fields: [routeId], references: [id])
  routeId String
}

enum RouteMode {
  drive
  transit
  bicycle
  walk
}

enum RouteType {
  balanced
  short
}

model Route {
  id String @id @default(uuid())

  name      String
  createdAt DateTime  @default(now())
  mode      RouteMode
  type      RouteType

  geojson Json

  waypoints RouteWaypoint[]

  user   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model Chat {
  id String @id @default(uuid())

  members User[] @relation(name: "chatMembers")

  chatMessage ChatMessage[]
}

model ChatMessage {
  id String @id @default(uuid())

  recipient   User   @relation(fields: [recipientId], references: [id], name: "chatMessageRecipient")
  recipientId String

  sender   User   @relation(fields: [senderId], references: [id], name: "chatMessageSender")
  senderId String

  content   String
  createdAt DateTime @default(now())

  chat   Chat   @relation(fields: [chatId], references: [id])
  chatId String
}
